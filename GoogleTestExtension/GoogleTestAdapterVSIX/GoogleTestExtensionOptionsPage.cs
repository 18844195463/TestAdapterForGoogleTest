//------------------------------------------------------------------------------
// <copyright file="GoogleTestExtensionOptionsPage.cs" company="Company">
//     Copyright (c) Company.  All rights reserved.
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel.Design;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Runtime.InteropServices;
using Microsoft.VisualStudio;
using Microsoft.VisualStudio.OLE.Interop;
using Microsoft.VisualStudio.Shell;
using Microsoft.VisualStudio.Shell.Interop;
using Microsoft.Win32;
using GoogleTestAdapter;
using System.ComponentModel;

namespace GoogleTestAdapterVSIX
{
    /// <summary>
    /// This is the class that implements the package exposed by this assembly.
    /// </summary>
    /// <remarks>
    /// <para>
    /// The minimum requirement for a class to be considered a valid package for Visual Studio
    /// is to implement the IVsPackage interface and register itself with the shell.
    /// This package uses the helper classes defined inside the Managed Package Framework (MPF)
    /// to do it: it derives from the Package class that provides the implementation of the
    /// IVsPackage interface and uses the registration attributes defined in the framework to
    /// register itself and its components with the shell. These attributes tell the pkgdef creation
    /// utility what data to put into .pkgdef file.
    /// </para>
    /// <para>
    /// To get loaded into VS, the package must be referred by &lt;Asset Type="Microsoft.VisualStudio.VsPackage" ...&gt; in .vsixmanifest file.
    /// </para>
    /// </remarks>
    [PackageRegistration(UseManagedResourcesOnly = true)]
    [InstalledProductRegistration("#110", "#112", "1.0", IconResourceID = 400)] // Info on this package for Help/About
    [Guid(PackageGuidString)]
    [SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1650:ElementDocumentationMustBeSpelledCorrectly", Justification = "pkgdef, VS and vsixmanifest are valid VS terms")]
    [ProvideOptionPage(typeof(OptionPageGrid), Options.CATEGORY_NAME, Options.PAGE_NAME, 0, 0, true)]
    [ProvideAutoLoad(UIContextGuids80.SolutionExists)]
    public sealed class GoogleTestExtensionOptionsPage : Package
    {
        /// <summary>
        /// GoogleTestExtensionOptionsPage GUID string.
        /// </summary>
        public const string PackageGuidString = "e7c90fcb-0943-4908-9ae8-3b6a9d22ec9e";

        /// <summary>
        /// Initializes a new instance of the <see cref="GoogleTestExtensionOptionsPage"/> class.
        /// </summary>
        public GoogleTestExtensionOptionsPage()
        {
            // Inside this method you can place any initialization code that does not require
            // any Visual Studio service because at this point the package object is created but
            // not sited yet inside Visual Studio environment. The place to do all the other
            // initialization is the Initialize method.
        }

        #region Package Members

        /// <summary>
        /// Initialization of the package; this method is called right after the package is sited, so this is the place
        /// where you can put all the initialization code that rely on services provided by VisualStudio.
        /// </summary>
        protected override void Initialize()
        {
            base.Initialize();

            OptionPageGrid Page = (OptionPageGrid)GetDialogPage(typeof(OptionPageGrid));
            Page.SaveSettingsToStorage();
        }

        #endregion

    }

    public class OptionPageGrid : DialogPage
    {
        private bool printTestOutput = Options.OPTION_PRINT_TEST_OUTPUT_DEFAULT_VALUE;
        private string testDiscoveryRegex = Options.OPTION_TEST_DISCOVERY_REGEX_DEFAULT_VALUE;
        private bool runDisabledTests = Options.OPTION_RUN_DISABLED_TESTS_DEFAULT_VALUE;
        private int nrOfTestRepetitions = Options.OPTION_NR_OF_TEST_REPETITIONS_DEFAULT_VALUE;
        private bool shuffleTests = Options.OPTION_SHUFFLE_TESTS_DEFAULT_VALUE;
        private string traitsRegexes = Options.OPTION_TRAITS_REGEXES_DEFAULT_VALUE;

        [Category(Options.CATEGORY_NAME)]
        [DisplayName(Options.OPTION_PRINT_TEST_OUTPUT)]
        [Description("Print the output generated by the test executable(s) to the Test Output window.")]
        public bool PrintTestOutput
        {
            get { return printTestOutput; }
            set { printTestOutput = value; }
        }

        [Category(Options.CATEGORY_NAME)]
        [DisplayName(Options.OPTION_TEST_DISCOVERY_REGEX)]
        [Description(@"If non-empty, this regex will be used to discover the executables containing your tests. Default regex: " + GoogleTestAdapter.Constants.TEST_FINDER_REGEX)]
        public string TestDiscoveryRegex
        {
            get { return testDiscoveryRegex; }
            set { testDiscoveryRegex = value; }
        }

        [Category(Options.CATEGORY_NAME)]
        [DisplayName(Options.OPTION_RUN_DISABLED_TESTS)]
        [Description("If true, all (selected) tests will be run, even if they have been disabled.")]
        public bool RunDisabledTests
        {
            get { return runDisabledTests; }
            set { runDisabledTests = value; }
        }

        [Category(Options.CATEGORY_NAME)]
        [DisplayName(Options.OPTION_NR_OF_TEST_REPETITIONS)]
        [Description("Tests will be run for the selected number of times (-1: infinite).")]
        public int NrOfTestRepetitions
        {
            get { return nrOfTestRepetitions; }
            set { nrOfTestRepetitions = value; }
        }

        [Category(Options.CATEGORY_NAME)]
        [DisplayName(Options.OPTION_SHUFFLE_TESTS)]
        [Description("If true, tests will be executed in random order.")]
        public bool ShuffleTests
        {
            get { return shuffleTests; }
            set { shuffleTests = value; }
        }

        [Category(Options.CATEGORY_NAME)]
        [DisplayName(Options.OPTION_TRAITS_REGEXES)]
        [Description("If true, tests will be executed in random order.")]
        public string TraitsRegexes
        {
            get { return traitsRegexes; }
            set { traitsRegexes = value; }
        }

    }

}