using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.InteropServices;
using Microsoft.VisualStudio.Shell;
using Microsoft.VisualStudio.Shell.Interop;
using GoogleTestAdapter;

namespace GoogleTestAdapterVSIX
{

    [PackageRegistration(UseManagedResourcesOnly = true)]
    [InstalledProductRegistration("#110", "#112", "1.0", IconResourceID = 400)] // Info on this package for Help/About
    [Guid(PackageGuidString)]
    [SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1650:ElementDocumentationMustBeSpelledCorrectly", Justification = "pkgdef, VS and vsixmanifest are valid VS terms")]
    [ProvideOptionPage(typeof(GeneralOptionsDialogPage), GoogleTestAdapterOptions.CategoryName, GoogleTestAdapterOptions.PageGeneralName, 0, 0, true)]
    [ProvideOptionPage(typeof(ParallelizationOptionsDialogPage), GoogleTestAdapterOptions.CategoryName, GoogleTestAdapterOptions.PageParallelizationName, 0, 0, true)]
    [ProvideAutoLoad(UIContextGuids80.SolutionExists)]
    public sealed class GoogleTestExtensionOptionsPage : Package
    {
        public const string PackageGuidString = "e7c90fcb-0943-4908-9ae8-3b6a9d22ec9e";

        override protected void Initialize()
        {
            base.Initialize();

            DialogPage page = GetDialogPage(typeof(GeneralOptionsDialogPage));
            page.SaveSettingsToStorage();
            page = GetDialogPage(typeof(ParallelizationOptionsDialogPage));
            page.SaveSettingsToStorage();
        }

    }

    public class GeneralOptionsDialogPage : DialogPage
    {

        [Category(GoogleTestAdapterOptions.CategoryName)]
        [DisplayName(GoogleTestAdapterOptions.OptionPrintTestOutput)]
        [Description("Print the output generated by the test executable(s) to the Test Output window.")]
        public bool PrintTestOutput { get; set; } = GoogleTestAdapterOptions.OptionPrintTestOutputDefaultValue;

        [Category(GoogleTestAdapterOptions.CategoryName)]
        [DisplayName(GoogleTestAdapterOptions.OptionTestDiscoveryRegex)]
        [Description(@"If non-empty, this regex will be used to discover the executables containing your tests. Default regex: " + GoogleTestAdapter.Constants.TestFinderRegex)]
        public string TestDiscoveryRegex { get; set; } = GoogleTestAdapterOptions.OptionTestDiscoveryRegexDefaultValue;

        [Category(GoogleTestAdapterOptions.CategoryName)]
        [DisplayName(GoogleTestAdapterOptions.OptionRunDisabledTests)]
        [Description("If true, all (selected) tests will be run, even if they have been disabled.")]
        public bool RunDisabledTests { get; set; } = GoogleTestAdapterOptions.OptionRunDisabledTestsDefaultValue;

        [Category(GoogleTestAdapterOptions.CategoryName)]
        [DisplayName(GoogleTestAdapterOptions.OptionNrOfTestRepetitions)]
        [Description("Tests will be run for the selected number of times (-1: infinite).")]
        public int NrOfTestRepetitions { get; set; } = GoogleTestAdapterOptions.OptionNrOfTestRepetitionsDefaultValue;

        [Category(GoogleTestAdapterOptions.CategoryName)]
        [DisplayName(GoogleTestAdapterOptions.OptionShuffleTests)]
        [Description("If true, tests will be executed in random order.")]
        public bool ShuffleTests { get; set; } = GoogleTestAdapterOptions.OptionShuffleTestsDefaultValue;

        [Category(GoogleTestAdapterOptions.CategoryName)]
        [DisplayName(GoogleTestAdapterOptions.OptionUserDebugMode)]
        [Description("If true, debug output will be printed to the test console.")]
        public bool UserDebugMode { get; set; } = GoogleTestAdapterOptions.OptionUserDebugModeDefaultValue;

        [Category(GoogleTestAdapterOptions.CategoryName)]
        [DisplayName(GoogleTestAdapterOptions.OptionTraitsRegexesBefore)]
        [Description("Allows to add traits to testcases matching a regex. "
            + GoogleTestAdapterOptions.TraitsRegexesRegexSeparator + " separates the regex from the traits, the trait's name and value are separated by "
            + GoogleTestAdapterOptions.TraitsRegexesTraitSeparator + ", and each pair of regex and trait is separated by "
            + GoogleTestAdapterOptions.TraitsRegexesPairSeparator + ".\nExample: " + @"MySuite\.*"
            + GoogleTestAdapterOptions.TraitsRegexesRegexSeparator + "Type"
            + GoogleTestAdapterOptions.TraitsRegexesTraitSeparator + "Small"
            + GoogleTestAdapterOptions.TraitsRegexesPairSeparator + @"MySuite2\.*|MySuite3\.*"
            + GoogleTestAdapterOptions.TraitsRegexesRegexSeparator + "Type"
            + GoogleTestAdapterOptions.TraitsRegexesTraitSeparator + "Medium")]
        public string TraitsRegexesBefore { get; set; } = GoogleTestAdapterOptions.OptionTraitsRegexesDefaultValue;

        [Category(GoogleTestAdapterOptions.CategoryName)]
        [DisplayName(GoogleTestAdapterOptions.OptionTraitsRegexesAfter)]
        [Description("Allows to override/add traits for testcases matching a regex. "
            + GoogleTestAdapterOptions.TraitsRegexesRegexSeparator + " separates the regex from the traits, the trait's name and value are separated by "
            + GoogleTestAdapterOptions.TraitsRegexesTraitSeparator + ", and each pair of regex and trait is separated by "
            + GoogleTestAdapterOptions.TraitsRegexesPairSeparator + ".\nExample: " + @"MySuite\.*"
            + GoogleTestAdapterOptions.TraitsRegexesRegexSeparator + "Type"
            + GoogleTestAdapterOptions.TraitsRegexesTraitSeparator + "Small"
            + GoogleTestAdapterOptions.TraitsRegexesPairSeparator + @"MySuite2\.*|MySuite3\.*"
            + GoogleTestAdapterOptions.TraitsRegexesRegexSeparator + "Type"
            + GoogleTestAdapterOptions.TraitsRegexesTraitSeparator + "Medium")]
        public string TraitsRegexesAfter { get; set; } = GoogleTestAdapterOptions.OptionTraitsRegexesDefaultValue;

        [Category(GoogleTestAdapterOptions.CategoryName)]
        [DisplayName(GoogleTestAdapterOptions.OptionAdditionalTestExecutionParam)]
        [Description("Additional parameters for Google Test executable.\n" + GoogleTestAdapterOptions.DescriptionOfPlaceholders)]
        public string AdditionalTestExecutionParams { get; set; } = GoogleTestAdapterOptions.OptionAdditionalTestExecutionParamDefaultValue;

    }

    public class ParallelizationOptionsDialogPage : DialogPage
    {

        [Category(GoogleTestAdapterOptions.CategoryName)]
        [DisplayName(GoogleTestAdapterOptions.OptionEnableParallelTestExecution)]
        [Description("Enable parallel test execution (experimental!)")]
        public bool EnableParallelTestExecution { get; set; } = GoogleTestAdapterOptions.OptionPrintTestOutputDefaultValue;

        [Category(GoogleTestAdapterOptions.CategoryName)]
        [DisplayName(GoogleTestAdapterOptions.OptionMaxNrOfThreads)]
        [Description("Maximum number of threads used for test execution. 0 = all available threads.")]
        public int MaxNrOfThreads { get; set; } = GoogleTestAdapterOptions.OptionMaxNrOfThreadsDefaultValue;

        [Category(GoogleTestAdapterOptions.CategoryName)]
        [DisplayName(GoogleTestAdapterOptions.OptionTestSetupBatch)]
        [Description("Batch file to be executed before each parallel test execution.\n" + GoogleTestAdapterOptions.DescriptionOfPlaceholders)]
        public string BatchForTestSetup { get; set; } = GoogleTestAdapterOptions.OptionTestSetupBatchDefaultValue;

        [Category(GoogleTestAdapterOptions.CategoryName)]
        [DisplayName(GoogleTestAdapterOptions.OptionTestTeardownBatch)]
        [Description("Batch file to be executed after each parallel test execution.\n" + GoogleTestAdapterOptions.DescriptionOfPlaceholders)]
        public string BatchForTestTeardown { get; set; } = GoogleTestAdapterOptions.OptionTestTeardownBatchDefaultValue;

    }

}